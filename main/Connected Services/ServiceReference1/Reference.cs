//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://tmtd.cpc.com.tw/", ConfigurationName="ServiceReference1.ListPriceWebServiceSoap")]
    public interface ListPriceWebServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMainProdListPrice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMainProdListPriceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMainProdListPrice_XML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMainProdListPrice_XMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMainProdListPrice_Historical", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMainProdListPrice_HistoricalAsync(string prodid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCAviationFuelListPrice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCAviationFuelListPriceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCAviationFuelListPrice_XML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCAviationFuelListPrice_XMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMarineFuelListPrice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMarineFuelListPriceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMarineFuelListPrice_XML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMarineFuelListPrice_XMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMarineFuelListPrice_International", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMarineFuelListPrice_InternationalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMarineFuelListPrice_International_XML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMarineFuelListPrice_International_XMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMainProdListPrice_English", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMainProdListPrice_EnglishAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tmtd.cpc.com.tw/getCPCMainProdListPrice_English_XML", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMainProdListPrice_English_XMLAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ListPriceWebServiceSoapChannel : ServiceReference1.ListPriceWebServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ListPriceWebServiceSoapClient : System.ServiceModel.ClientBase<ServiceReference1.ListPriceWebServiceSoap>, ServiceReference1.ListPriceWebServiceSoap
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ListPriceWebServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ListPriceWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), ListPriceWebServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ListPriceWebServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ListPriceWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ListPriceWebServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ListPriceWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ListPriceWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMainProdListPriceAsync()
        {
            return base.Channel.getCPCMainProdListPriceAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMainProdListPrice_XMLAsync()
        {
            return base.Channel.getCPCMainProdListPrice_XMLAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMainProdListPrice_HistoricalAsync(string prodid)
        {
            return base.Channel.getCPCMainProdListPrice_HistoricalAsync(prodid);
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCAviationFuelListPriceAsync()
        {
            return base.Channel.getCPCAviationFuelListPriceAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCAviationFuelListPrice_XMLAsync()
        {
            return base.Channel.getCPCAviationFuelListPrice_XMLAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMarineFuelListPriceAsync()
        {
            return base.Channel.getCPCMarineFuelListPriceAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMarineFuelListPrice_XMLAsync()
        {
            return base.Channel.getCPCMarineFuelListPrice_XMLAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMarineFuelListPrice_InternationalAsync()
        {
            return base.Channel.getCPCMarineFuelListPrice_InternationalAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMarineFuelListPrice_International_XMLAsync()
        {
            return base.Channel.getCPCMarineFuelListPrice_International_XMLAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.ArrayOfXElement> getCPCMainProdListPrice_EnglishAsync()
        {
            return base.Channel.getCPCMainProdListPrice_EnglishAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> getCPCMainProdListPrice_English_XMLAsync()
        {
            return base.Channel.getCPCMainProdListPrice_English_XMLAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ListPriceWebServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ListPriceWebServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ListPriceWebServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://vipmember.tmtd.cpc.com.tw/OpenData/ListPriceWebService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ListPriceWebServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://vipmember.tmtd.cpc.com.tw/OpenData/ListPriceWebService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ListPriceWebServiceSoap,
            
            ListPriceWebServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.2")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
